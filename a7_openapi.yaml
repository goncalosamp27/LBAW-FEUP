openapi: 3.0.0

info:
  version: '1.0'
  title: 'LBAW SyncIt! Web API'
  description: 'Web Resources Specification (A7) for SyncIt!'

servers:
- url: http://lbaw24115.lbaw.fe.up.pt
  description: Production server

externalDocs:
  description: Find more info here.
  url: https://gitlab.up.pt/lbaw/lbaw2425/lbaw24115/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Users'
  - name: 'M03: Events and Tickets'
  - name: 'M04: Administration'
  - name: 'M05: Notifications'


paths:

###################################AUTHENTICATION##############################################

##LOGIN
  /login:
    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show log-in UI'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email_or_username:          
                  type: string
                password:
                  type: string
              required:
                - email_or_username
                - password
 
      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to homepage.'
                  value: '/home'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'
        '500':
          $ref: '#/components/responses/InternalServerError'
 
##LOGOUT
  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated used. Access: MBR, ADM'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to home page.'
                  value: '/home'
                302Error:
                  description: 'Failed logout. Redirect to login form.'
                  value: '/login'
        '500':
          $ref: '#/components/responses/InternalServerError'

##REGISTER
  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show sign-up UI'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: VST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                display_name:
                  type: string    
                email:
                  type: string
                picture:
                  type: string
                  format: binary
                bio:
                  type: string 
                password:
                  type: string 
              required:
                - email
                - password
                - name
                - display_name

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to home page.'
                  value: '/home'
                302Failure:
                  description: 'Failed authentication. Redirect to Registration form.'
                  value: '/register'

  /*:
    get:
      operationId: R201
      summary: 'R201: View user profile'
      description: 'Show the individual user profile. Access: MBR, OWN, ART, ADM'
      tags:
        - 'M02: Users'
      responses:
        '200':
          $ref: '#/components/schemas/User'
          description: 'Ok. Show profile UI'
        '302':
          description: 'Redirect if user is not logged'
          headers:
            Location:
              schema:
                type: string
              example:
                302Failure:
                  description: 'Failure.'

    ## EDIT PROFILE  
  /edit_profile:
    get:
      operationId: R202
      summary: 'R202: Edit Profile Form'
      description: 'Provide edit profile form. Access: OWN'
      tags:
        - 'M02: Users'
      responses:
        '200':
          $ref: '#/components/schemas/User'
          description: 'Ok. Show form with user info as form values'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'        
        '500':
          $ref: '#/components/responses/InternalServerError'   
    put:
      operationId: R203
      summary: 'R203: Edit Profile'
      description: 'Allows a member to edit their profile information. Access: OWN.'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        description: 'Member profile details to be updated.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        responses:
          '200':
            description: 'Profile updated successfully.'
            headers:
              Location:
                description: 'Redirects to the updated profile page.'
                type: string
                example: '/home'
          '400':
            $ref: '#/components/responses/BadRequest'
            headers:
              Location:
                description: 'Redirect to the error page for the bad request.'
                type: string
                example: '/error/bad-request'
          '401':
            $ref: '#/components/responses/Unauthorized'
            headers:
              Location:
                description: 'Redirect to the login page or authorization error page.'
                type: string
                example: '/login'
          '404':
            $ref: '#/components/responses/NotFound'
            headers:
              Location:
                description: 'Redirect to the error page for the resource not found.'
                type: string
                example: '/error/not-found'
          '500':
            $ref: '#/components/responses/InternalServerError'
            headers:
              Location:
                description: 'Redirect to the general error page for server errors.'
                type: string
                example: '/error/internal-server'

  /tickets:
    get:
      operationId: R204
      summary: 'R204: View user tickets'
      description: 'Show a list of tickets purchased by the user. Access: OWN'
      tags:
        - 'M03: Events and Tickets'
      responses:
        '200':
          description: 'List of tickets retrieved successfully.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      operationId: R205
      summary: 'R205: Refund Ticket'
      description: 'Allows a member to refund a ticket. Access: OWN.'
      tags:
        - 'M03: Events and Tickets'
      requestBody:
        required: true
        description: 'Ticket details for the refund request.'
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_id:
                  type: integer
                  description: 'Unique identifier of the ticket being refunded.'
                  required: true
      responses:
        '200':
          description: 'Ticket refunded successfully.'
          headers:
            Location:
              description: 'Redirects to the tickets list or the refund success page.'
              schema:
                type: string
                example: '/tickets'

        '400':
          $ref: '#/components/responses/BadRequest'
          headers:
            Location:
              description: 'Redirect to the error page for the bad request.'
              type: string
              example: '/error/bad-request'
        '401':
          $ref: '#/components/responses/Unauthorized'
          headers:
            Location:
              description: 'Redirect to the login page or authorization error page.'
              type: string
              example: '/login'
        '404':
          $ref: '#/components/responses/NotFound'
          headers:
            Location:
              description: 'Redirect to the error page for the resource not found.'
              type: string
              example: '/error/not-found'
        '500':
          $ref: '#/components/responses/InternalServerError'
          headers:
            Location:
              description: 'Redirect to the general error page for server errors.'
              type: string
              example: '/error/internal-server'


  /events/search:
    get:
      operationId: R301
      summary: 'R301: Search Events API'
      description: 'Searches for events and returns the results as JSON. Access: MBR, ADM'

      tags: 
        - 'M03: Events and Tickets'

      parameters:
        - in: query
          name: search
          description: 'String to use for full-text search'
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /create:
      get:
        operationId: R302
        summary: 'R302: Create Event Form'
        description: 'Provide create event form. Access: MBM ART'
        tags:
          - 'M03: Events and Tickets'
        responses:
          '200':
            description: 'Ok. Show event Creation UI'
          '500':
            $ref: '#/components/responses/InternalServerError'
      post:
        operationId: R303
        summary: 'R303: Create Event'
        description: 'Allows a member to create a new event with an optional media upload (image). Access: MBR'
        tags:
          - 'M03: Events and Tickets'
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: 'Title of the event'
                  description:
                    type: string
                    description: 'Detailed description of the event'
                  location:
                    type: string
                    description: 'Location where the event will take place'
                  date:
                    type: string
                    format: date-time
                    description: 'Date and time of the event in ISO 8601 format'
                  type_of_event:
                    type: string
                    description: 'Indicates if the event is public or private'
                  price:
                    type: float
                    description: 'Price of the event'   
                  capacity:
                    type: float
                    description: 'Max capacity of the event (tickets available)'                                        
                  media:
                    type: string
                    format: binary
                    description: 'Optional media files (images or videos) for the event'
                  refund_policy:
                    type: integer
                    description: 'Percentage of the price to return in case of refund'
                  main_tag:
                    type: string
                    description: 'Type of the event'
                    enum:
                      - dance
                      - music
                  subgenre:
                    type: string
                    description: 'Subgenre of the event'
                  mood:
                    type: string
                    description: 'Subgenre of the event'
                  setting:
                    type: string
                    description: 'Subgenre of the event'   
                example:
                  title: 'Summer Dance Party'
                  description: 'A vibrant night of salsa dancing with live music, perfect for all levels of dancers.'
                  location: 'Sunset Club, Miami, USA'
                  date: '2024-07-20T19:30:00Z'
                  type_of_event: 'Public'
                  price: 25.00
                  capacity: 300
                  media: 'https://example.com/media/event_1.jpg'
                  refund_policy: 100
                  main_tag: 'dance'
                  subgenre: 'salsa'
                  mood: 'energetic'
                  setting: 'theatre'
                required:
                  - title
                  - date
                  - description
                  - type_of_event
                  - capacity 
                  - price
                  - main_tag
                  - subgenre
                  - mood
                  - setting
                  - location
        responses:
          '200':
            description: 'Event created successfully.'
            headers:
              Location:
                description: 'Redirect to the newly created event details.'
                schema:
                  type: url
                  example: '/event/{event_id}'
          '400':
            $ref: '#/components/responses/BadRequest'
            headers:
              Location:
                description: 'Redirect to the error page for bad request.'
                type: string
                example: '/error/bad-request'
          '401':
            $ref: '#/components/responses/Unauthorized'
            headers:
              Location:
                description: 'Redirect to the login page or authorization error page.'
                type: string
                example: '/login'
          '404':
            $ref: '#/components/responses/NotFound'
            headers:
              Location:
                description: 'Redirect to the error page for not found.'
                type: string
                example: '/error/not-found'
          '500':
            $ref: '#/components/responses/InternalServerError'
            headers:
              Location:
                description: 'Redirect to the error page for internal server error.'
                type: string
                example: '/error/internal-server'

##INVITE TO EVENT
  /event/{event_id}/participants:
    get:
      operationId: R304
      summary: 'R304: View event participants'
      description: 'Show the list of participants of an event and invite button + form. Access: OWN'
      tags:
        - 'M03: Events and Tickets'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: 'Unique identifier of the event'
      responses:
        '200':
          description: 'List of event participants retrieved successfully.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: R305
      summary: 'R305: Invite Users to Event by Username'
      description: 'Allows an artist to invite members to their event using their usernames. The invite is sent as an in-app notification. Access: OWN'
      tags:
        - 'M03: Events and Tickets'
        - 'M05: Notifications'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: 'Unique identifier of the event'
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: 'Username of the member to invite'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Username of the Member to be invited'
                message:
                  type: string
                  description: 'Personalized message to be sent to the invited member'
              required:
                - username
      responses:
        '200':
          description: 'Invitations sent successfully.'
          headers:
            Location:
              description: 'URL to redirect to the event details page.'
              schema:
                type: string
                example: '/notifications'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /event/{event_id}/:
    get:
      operationId: R306
      summary: 'R306: View Event Details'
      description: 'Retrieves detailed information about a specific event, including media, ratings, and other necessary data. Access: MBR, ADM'
      tags:
        - 'M03: Events and Tickets'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: 'Unique identifier of the event'
      responses:
        '200':
          description: 'Event details retrieved successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'               
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
 
  ## PURCHASE TICKET
  /event/{event_id}:
    post:
      operationId: R307
      summary: 'R307: Purchase Tickets for an Event'
      description: 'Allows a member to purchase a ticket for a specific event. Access: MBR, ART.'
      tags:
        - 'M03: Events and Tickets'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: 'Unique identifier of the event'
      responses:
        '302':
          description: 'Redirect after processing the purchase information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to member ticket page.'
                  value: '/tickets'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '409':
          description: 'Conflict. There are not enough tickets available or you have requested more tickets than the maximum allowed.'

  ## EDIT EVENT
  /events/edit/{event_id}:
    put:
      operationId: R308
      summary: 'R308: Edit Event Details'
      description: 'Allows an artist to edit the details of their event, such as title, description, date, location, etc. Access: ART, ADM'
      tags:
        - 'M03: Events and Tickets'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: 'Unique identifier of the event to be edited'
      requestBody:
        required: true
        description: 'Updated event details to be applied.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: 'Event details updated successfully.'
          headers:
            Location:
              description: 'Redirects to the updated event page.'
              schema:
                type: string
                example: '/event/{event_id}'
        '400':
          $ref: '#/components/responses/BadRequest'
          headers:
            Location:
              description: 'Redirect to the error page for bad request.'
              type: string
              example: '/error/bad-request'
        '401':
          $ref: '#/components/responses/Unauthorized'
          headers:
            Location:
              description: 'Redirect to the login page or authorization error page.'
              type: string
              example: '/login'
        '404':
          $ref: '#/components/responses/NotFound'
          headers:
            Location:
              description: 'Redirect to the error page for resource not found.'
              type: string
              example: '/error/not-found'
        '500':
          $ref: '#/components/responses/InternalServerError'
          headers:
            Location:
              description: 'Redirect to the error page for internal server errors.'
              type: string
              example: '/error/internal-server'

## MANAGE EVENT PARTICIPANTS

  # Add participant to event
  /events/{event_id}/participants:
    post:
      operationId: R309
      summary: "R309: Add a member to an event's participant list"
      description: "Allows an artist to add a member to the event's participants by assigning them a ticket. Access OWN."
      tags:
        - 'M03: Events and Tickets'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: "Unique identifier of the event"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_id:
                  type: integer
                  description: "The unique identifier of the member being added to the event"
                event_id:
                  type: integer
                  description: "The unique identifier of the event"
              required:
                - member_id
                - event_id
      responses:
        '302':
          description: 'Redirect after processing the adding the member.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Invite sent . Redirect to participants page.'
                  value: '/events/{event_id}/participants'
                302Failure:
                  description: 'Invite failed. Redirect to participants page.'
                  value: '/events/{event_id}/participants'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '409':
          description: "Conflict. The member is already registered for this event."
  
# Remove participant from event
    delete:
      operationId: R310
      summary: "R310: Remove a member from an event's participant list"
      description: "Allows an artist to remove a member from the event's participants by deleting their ticket. Access OWN."
      tags:
        - 'M03: Events and Tickets'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
          description: "Unique identifier of the event"
        - in: query
          name: ticket_id
          schema:
            type: integer
          required: true
          description: "Unique identifier of the ticket for the participant to be removed"
      responses:
        '200':
          description: "Member successfully removed from the event."
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

###############################ADMINISTRATION####################################

 ##CREATE USER ACCOUNTS

  /admin/register:
    post:
      operationId: R401
      summary: 'R401: Create User Account'
      description: 'Creates a new user account with specified details. Access: ADM'
      tags:
        - 'M04: Administration'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              parameters:
                name:
                  type: string
                display_name:
                  type: string    
                email:
                  type: string
                picture:
                  type: string
                  format: binary
                bio:
                  type: string 
                password:
                  type: string 
              required:
                - email
                - password
                - name
                - display_name
              example:
                name: 'John Doe'
                email: 'john.doe@example.com'
                picture: 'url.png'
                password: '12345678'

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to home.'
                  value: '/home'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

 ##SEARCH FOR USERS

  /admin/search:
    get:
      operationId: R402
      summary: 'R402: Search for Users'
      description: 'Search for users based on query parameters. Access: ADM'
      tags:
        - 'M04: Administration'
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
          required: true
          description: 'Search term to look for matching usernames or names'
      example: 'John Doe'
      responses:
        '200':
          description: 'Ok. Return a list of users matching the search criteria.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


 ##EDIT USER ACCOUNTS

  /admin/edit/member/{id}:
    put:
      operationId: R403
      summary: 'R403: Edit User Account'
      description: 'Edit user account information. Access: ADM'
      tags:
        - 'M04: Administration'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          description: 'ID of the user to update'
      requestBody:
        required: true
        description: 'User data to be updated'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User updated successfully.'
          
        '400':
          $ref: '#/components/responses/BadRequest'
          headers:
            Location:
              description: 'Redirect to the error page for bad request.'
              type: string
              example: '/error/bad-request'
        '401':
          $ref: '#/components/responses/Unauthorized'
          headers:
            Location:
              description: 'Redirect to the login page or authorization error page.'
              type: string
              example: '/login'
        '404':
          $ref: '#/components/responses/NotFound'
          headers:
            Location:
              description: 'Redirect to the error page for user not found.'
              type: string
              example: '/error/not-found'
        '500':
          $ref: '#/components/responses/InternalServerError'
          headers:
            Location:
              description: 'Redirect to the error page for internal server errors.'
              type: string
              example: '/error/internal-server'


###############################NOTIFICATIONS####################################

##SEE NOTIFICATIONS
  /notifications:
    get:
      operationId: R501
      summary: 'R501: User notifications page.'
      description: 'Show user notifications page. Access: MBR'
      tags:
        - 'M05: Notifications'

      responses:
        '200':
          description: 'OK. Show the user notifications page.'
        '302':
          description: 'Redirect if user is not logged in'
          headers:
            Location:
              schema:
                type: string
              example:
                302Failure:
                  description: 'Failure. User not logged in.'
    put:
      operationId: R502
      summary: 'R502: Delete Notification'
      description: 'Allows a member to refund a ticket. Access: OWN.'
      tags:
        - 'M05: Notifications'
      requestBody:
        required: true
        description: 'Notification_id to be deleted'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: 'Notification deleted successfully.'
          headers:
            Location:
              description: 'Redirect to the list of notifications after deletion.'
              schema:
                type: string
                example: '/notifications'
        '400':
          $ref: '#/components/responses/BadRequest'
          headers:
            Location:
              description: 'Redirect to the error page for bad request.'
              type: string
              example: '/error/bad-request'
        '401':
          $ref: '#/components/responses/Unauthorized'
          headers:
            Location:
              description: 'Redirect to the login page or authorization error page.'
              type: string
              example: '/login'
        '404':
          $ref: '#/components/responses/NotFound'
          headers:
            Location:
              description: 'Redirect to the error page for notification not found.'
              type: string
              example: '/error/not-found'
        '500':
          $ref: '#/components/responses/InternalServerError'
          headers:
            Location:
              description: 'Redirect to the error page for internal server errors.'
              type: string
              example: '/error/internal-server'

components:
  schemas:
    Event:
      type: object
      properties:
        title:
          type: string
          description: 'Title of the event'
        description:
          type: string
          description: 'Detailed description of the event'
        type:
          type: string
          description: 'Visibility of the event (Public, Private)'
        date:
          type: string
          format: date-time
          description: 'Date and time of the event in ISO 8601 format'
        location:
          type: string
          description: 'Location of the event'
        media_url:
          type: string
          format: uri
          description: 'URL for event image'
        price:
          type: number
          format: float
          description: 'Price of the event'
        capacity:
          type: integer
          description: 'The maximum number of tickets available for this event'
        refund_policy:
          type: integer
          description: 'Refund percentage of the ticket price'
        artist_id:
          type: integer
          description: 'Owner of the event'
      example:
        title: 'Salsa Night with Live Music'
        description: 'Join us for an evening of vibrant salsa dancing and live music under the stars.'
        type: 'Public'
        date: '2024-12-15T20:00:00Z'
        location: 'Havana Club, Miami, USA'
        media_url: 'https://example.com/media/event101/image1.jpg'
        price: 20.00
        capacity: 500
        refund_policy: 100
  
    User:
      type: object
      properties:
        username:
          type: string
          description: 'Username of the member'
          required: true
        bio:
          type: string
          description: 'Biography of the member'
          required: false
        image:
          type: string
          format: uri
          description: 'URL pointing to the profile picture of the member'
          required: false
        name:
          type: string
          description: 'Full name of the member'
          required: true
        email:
          type: string
          format: email
          description: 'Email address of the member'
          required: true
      example:
        username: 'john_doe123'
        bio: 'A software developer passionate about EDM.'
        image: 'https://example.com/images/john_doe123.png'
        name: 'John Doe'
        email: 'john.doe@example.com'

    Ticket:
      type: object
      properties:
        ticket_id:
          type: integer
          description: 'Unique identifier of the ticket'
          required: true
        event_id:
          type: integer
          description: 'Unique identifier of the event'
          required: true
        purchase_date:
          type: string
          format: date-time
          description: 'Date and time the ticket was purchased'
          required: true
      example:
        ticket_id: 1001
        event_id: 301
        purchase_date: '2024-04-01T14:30:00Z'

  responses:
    BadRequest:
      description: 'Bad Request. The request could not be understood or was missing required parameters.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Invalid request parameters.'
    Unauthorized:
      description: 'Unauthorized. Authentication is required to access this resource.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'User is not authenticated.'
    NotFound:
      description: 'Not Found. The requested resource could not be found.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Resource not found.'
    InternalServerError:
      description: 'Internal Server Error. An unexpected error occurred on the server.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Something went wrong on the server.'